#######################################################################
# Mr. OTCS
#
# https://github.com/TheOpponent/mr-otcs
# https://twitter.com/TheOpponent
#
# This is a sample configuration file with default values.
# Copy this file and rename it to config.ini. Take care not to overwrite
# your previous configuration file if you are upgrading.
# The default media player arguments are for Raspberry Pi.

[Paths]
# Program paths.
MEDIA_PLAYER_PATH = /usr/bin/ffmpeg
RTMP_STREAMER_PATH = /usr/local/bin/ffmpeg

# Base path for all video files, including trailing slash.
# Use %(BASE_PATH)s as a substitution for this path in subsequent options
# in this section.
BASE_PATH = /home/pi/videos/

# Playlist file. This is a text file with video filenames, one per line.
# The file names in this text file are relative to BASE_PATH, including
# subdirectories.
# Items starting with comment characters ; # or // and blank lines will
# be skipped.
MEDIA_PLAYLIST = playlist.txt

# Filename for playback info.
# To save playback progress, this program saves a file with two lines:
# an index number and a seconds elapsed number. If this file does not exist,
# it will be created when the program is run. This can be changed from the
# default to allow for alternate playlists using the same BASE_PATH.
PLAY_INDEX_FILE = %(BASE_PATH)s/play_index.txt

# Filename for playback history file. If this file does not exist, it will be
# created when the program is run. This file is for informational purposes and
# is not used by the program.
# Leave blank to disable.
PLAY_HISTORY_FILE = %(BASE_PATH)s/play_history.txt

# Filename for JSON schedule generation.
# Leave blank to disable JSON file output.
SCHEDULE_PATH = schedule.json

# Filename for a JSON file containing alternate names for playlist entries.
# When the JSON schedule is generated, filenames matching keys in this JSON
# will be replaced with the corresponding values.
# The file alt_names_example.json contains example replacements.
# Leave blank to disable.
ALT_NAMES_JSON_PATH =

[VideoOptions]
# Number of seconds of black video to add between each video.
# This is added to schedule durations for each video.
# Set to 0 if not using ffmpeg.
VIDEO_PADDING = 2

# The URL for the stream. Include your stream key.
STREAM_URL =

# Internet connectivity is checked regularly by making a request to these
# URLs, separated by commas, tried one at a time in random order. If any one
# of these URLs replies, the connection test succeeds. If a connection cannot
# be made to any of these locations, the encoding is interrupted and the
# request(s) retried until a connection can be re-established.
CHECK_URL = https://google.com, https://twitch.tv, https://github.com, https://amazon.com, https://canhazip.com, https://1.1.1.1, https://8.8.8.8

# Check the above URL after this interval in seconds. Reduce this setting at
# your own risk. Minimum 10 seconds, or the number of links above times
# 5 seconds, whichever is greater.
# If the connection check fails, the video will rewind this many seconds when
# the connection is re-established.
CHECK_INTERVAL = 60

# Arguments to pass to media player. If not using ffmpeg, this should
# include whatever arguments are necessary to immediately exit the
# player after playback is completed.
# "{file}" is replaced with the video from the playlist to be played.
# To save playback position, add {skip_time} as a parameter for
# the corresponding media player argument to set start time.
# Add %(VIDEO_PADDING)s for the VIDEO_PADDING setting.
# On non-Raspberry Pi platforms, you will need to change the codec from
# h264_v4l2m2m to a different one that matches your hardware.
MEDIA_PLAYER_ARGUMENTS = -hide_banner -loglevel fatal -re -ss {skip_time} -i "{file}" -filter_complex "[0:v]scale=1280x720,fps=30[scaled];[scaled]tpad=stop_duration=%(VIDEO_PADDING)s;apad=pad_dur=%(VIDEO_PADDING)s" -c:v h264_v4l2m2m -b:v 4000k -acodec aac -b:a 192k -ar 48000 -f flv -g 60 rtmp://localhost:1935/live/

# Arguments to pass to RTMP stream process. For the default ffmpeg and
# nginx configuration, this should not need to be changed.
# Add %(STREAM_URL)s for the stream URL setting above.
RTMP_ARGUMENTS = -hide_banner -loglevel fatal -i rtmp://localhost:1935/live -vcodec copy -acodec copy -f flv %(STREAM_URL)s

# Some streaming services, such as Twitch, impose a maximum stream
# length (e.g. 24 or 48 hours) before forcibly terminating the stream.
# The program accumulates the total runtime of all videos since the
# last restart and if the next video would exceed the limit defined in
# STREAM_TIME_BEFORE_RESTART in minutes, it will close all ffmpeg processes,
# wait a short period defined in STREAM_RESTART_WAIT, and resume with
# the next file in the playlist. Set to 0 to never restart the stream.
# Default setting is 47 hours, 59 minutes and 10 seconds respectively.
# Regardless of these settings, at least one video will always play
# before the stream restarts.
STREAM_TIME_BEFORE_RESTART = 2879
STREAM_RESTART_WAIT = 10

# %RESTART and %INSTANT_RESTART entries in the playlist will be ignored unless
# the stream has run for this amount of minutes. Default setting is 30 minutes.
STREAM_RESTART_MINIMUM_TIME = 30

# Special videos can be played before and after restarting the stream to inform
# viewers of the interruption in playback. These can be set to the same video.
# These can be set to a file relative to BASE_PATH or an absolute path.
# The VIDEO_PADDING setting will be added to both. The length of these videos
# are considered in the total runtime calculated for STREAM_TIME_BEFORE_RESTART.
# Keep in mind that due to the nature of video streams, the first few and/or
# last few seconds of these videos may not be seen by the viewers. These videos
# will not be included in the schedule, but their durations and the
# STREAM_RESTART_WAIT duration will be added to the next video after the restart.
# Leave blank to disable.
STREAM_RESTART_BEFORE_VIDEO =
STREAM_RESTART_AFTER_VIDEO =

[PlayIndex]
# Playback info file configuration.
# The first line contains the index of the playlist starting at 0.
# The second line contains the elapsed time of the current
# video playback in seconds.

# Interval to save playback position in seconds.
# Lower intervals are more precise in resuming when the program is
# unexpectedly terminated, but if PLAY_INDEX_FILE is on flash media like
# USB drive or SD card, higher intervals are recommended to reduce
# disk writes.
TIME_RECORD_INTERVAL = 30

# When resuming video with a saved time in play_index.txt, rewind this
# many seconds. Recommended when streaming to RTMP.
REWIND_LENGTH = 30

[Schedule]
# These options have no effect if SCHEDULE_PATH is disabled.

# Number of upcoming videos to write in JSON schedule.
# Set SCHEDULE_UPCOMING_LENGTH to the total number of minutes of
# video to add to the schedule, and SCHEDULE_MAX_VIDEOS to limit
# the number of videos. Schedule generation is finished when either
# limit is reached.
SCHEDULE_MAX_VIDEOS = 15
SCHEDULE_UPCOMING_LENGTH = 240

# Number and length of previously played videos to write in JSON schedule.
# These are used to read the playlist in reverse.
# Set SCHEDULE_PREVIOUS_MAX_VIDEOS to 0 to disable.
SCHEDULE_PREVIOUS_MAX_VIDEOS = 5
SCHEDULE_PREVIOUS_LENGTH = 60

# Filename patterns to exclude in schedules. This can be used to exclude
# categories of videos such as station idents or commercials from the
# schedule. Their durations will still be calculated and added to
# the durations of preceding videos to keep the times aligned.
# Set to names separated by commas. Paths beginning with these names
# (case insensitive) will be ignored.
# e.g. Station Breaks/, Commercial will exclude all files in
# the Station Breaks directory and all files and paths in BASE_PATH
# starting with "Commercial". Note that this is not recursive.
# Leave blank to disable.
SCHEDULE_EXCLUDE_FILE_PATTERN =

[Retry]
# Allow retrying file access if next video file cannot be opened.
# This can be useful if BASE_PATH is a network share.
# Set to 0 to not attempt to reopen missing files.
# Set RETRY_ATTEMPTS to -1 to retry infinitely.
# RETRY_PERIOD is the delay in seconds between each retry attempt.
RETRY_ATTEMPTS = 0
RETRY_PERIOD = 5

# Abort program if a file in the playlist cannot be found after retrying
# according to the settings above. This applies only to the encoder;
# the program will not exit during schedule generation if files cannot
# be found, but any such files will not be accounted for in the
# timestamps.
# Set to True to exit with an error if the file cannot be found.
# Set to False to allow the program to continue and skip the entry in the
# playlist. This allows the file to be included in future iterations
# of the playlist if it is found later.
EXIT_ON_FILE_NOT_FOUND = False

[SSH]
# Options for uploading the JSON schedule to a remote server via SSH.
# The file at SCHEDULE_PATH will be uploaded immediately after generation.
# Leave REMOTE_ADDRESS blank to disable. If a private key file and/or
# password will not be used, leave those fields blank.
REMOTE_ADDRESS =
REMOTE_PORT = 22
REMOTE_DIRECTORY =
REMOTE_USERNAME =
REMOTE_PASSWORD =
REMOTE_KEY_FILE =
REMOTE_KEY_FILE_PASSWORD =

[Misc]
# Number of videos to keep in history log, saved in PLAY_HISTORY_FILE.
PLAY_HISTORY_LENGTH = 10

# Control the amount of information printed to stdout. Each level includes
# the levels above it.
#
# Set to one of the following:
# fatal: Only print errors that cause the program to exit.
# error: Print errors, including recoverable errors.
# warn: Print warnings that can affect the stream, such as encoder or
# remote file upload failures.
# notice: Print stream events such automatic restarts and skipped schedule
# generation due to SCHEDULE_EXCLUDE_FILE_PATTERN.
# play: Info on the currently playing video.
# info: The default verbosity level.
# verbose: Print information on every line in the playlist and all file write
# operations. This generates a large amount of console output and may reduce
# performance.
# verbose2: Also print regular updates on the network check and
# PLAY_INDEX_FILE.
VERBOSE = info